<Project Sdk="Microsoft.NET.Sdk">

  <!-- Set metadata for the assembly -->
  <PropertyGroup>
    <PackageId>8648407C-C0ED-4D95-8082-E4E3877D441F</PackageId>
    <Version>0.0.1</Version>
    <Authors>AlvaroPickmans</Authors>
    <Company>matterlab</Company>
    <Product>Multiversions.Revit.Sample</Product>
    <Description>A multiversion Revit add-in sample.</Description>
    <Copyright>© Copyright 2021</Copyright>
    <PackageProjectUrl>https://www.matterlab.co/post/multiversion-revit-plugins-explained</PackageProjectUrl>
    <NeutralLanguage>en</NeutralLanguage>
  </PropertyGroup>

  <!-- Debug configuration - Individual Revit version -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <!-- Set the desired Revit version to Debug here -->
    <RevitVersion>2021</RevitVersion>

    <TargetFramework Condition="'$(RevitVersion)' == '2018'">net46</TargetFramework>
    <TargetFramework Condition="'$(RevitVersion)' == '2019'">net47</TargetFramework>
    <TargetFramework Condition="'$(RevitVersion)' == '2020'">net471</TargetFramework>
    <TargetFramework Condition="'$(RevitVersion)' == '2021'">net48</TargetFramework>
    <TargetFramework Condition="'$(RevitVersion)' == '2022'">net48</TargetFramework>
  </PropertyGroup>

  <!-- Release configuration - All Revit versions -->
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <!-- Specify the desired Revit versions (by their target framework) to release here -->
    <TargetFrameworks>net46;net47;net471;net48</TargetFrameworks>

    <RevitVersion Condition="'$(TargetFramework)' == 'net46'">2018</RevitVersion>
    <RevitVersion Condition="'$(TargetFramework)' == 'net47'">2019</RevitVersion>
    <RevitVersion Condition="'$(TargetFramework)' == 'net471'">2020</RevitVersion>
    <RevitVersion Condition="'$(TargetFramework)' == 'net48'">2021</RevitVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Forcibly set platform to 'x64' and ignore architecture-related problems -->
    <PlatformTarget>x64</PlatformTarget>
    <Platforms>x64</Platforms>
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    <NoWarn>NETSDK1049</NoWarn>

    <!-- Force the project to use the legacy debugger engine -->
    <DebugEngines>{351668CC-8477-4fbf-BFE3-5F1006E4DB1F}</DebugEngines>

    <!-- Define handy symbols to use in the code in order to accommodate different Revit versions,
    e.g. by wrapping legacy / deprecated API calls with #if REVIT2014 | REVIT2015 -->
    <DefineConstants>REVIT$(RevitVersion)</DefineConstants>

    <!-- Multiple targets can cause obj folder locking by concurrent builds -->
    <BuildInParallel>false</BuildInParallel>

    <!-- Override 'OutputPath' to Debug/Release + Revit version -->
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <OutputPath>..\bin\$(Configuration)\$(RevitVersion)</OutputPath>
  </PropertyGroup>

  <!--We can define our custom preprocessor constants to simplify our project code-->
  <PropertyGroup Condition="'$(RevitVersion)' != '2018' AND '$(RevitVersion)' != '2019' AND '$(RevitVersion)' != '2020'">
    <DefineConstants>$(DefineConstants);USE_FORGETYPEID</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="WindowsBase" />
  </ItemGroup>

  <ItemGroup>
    <!--Conditionaly reference the latest Revit SDK assemblies dependending on which version we are targeting-->
    <PackageReference Include="Autodesk.Revit.SDK" Version="$(RevitVersion).*" PrivateAssets="All" />
  </ItemGroup>

  <!-- Use the assembly name for the add-in manifest and copy it to the output -->
  <ItemGroup>
    <None Update="Manifests\AddinTemplate.addin">
      <Link>$(AssemblyName).addin</Link>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="PreventRevitSDKCopyLocal" AfterTargets="ResolveReferences">
    <ItemGroup>
      <!-- A temporary fix for Revit SDK files being copied to the output folder -->
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' == 'Autodesk.Revit.SDK'" />
    </ItemGroup>
  </Target>

  <!-- Set the assembly path in the add-in manifest -->
  <Target Name="CreateAddinManifest" AfterTargets="AfterBuild">
    <ItemGroup>
      <AddinManifest Include="$(OutputPath)\$(AssemblyName).addin" />
    </ItemGroup>
    <ReplaceFileText Condition="'$(Configuration)' == 'Release'" InputFilename="@(AddinManifest)" OutputFilename="@(AddinManifest)" MatchExpression="Assembly&gt;(.*?)&lt;" ReplacementText="Assembly&gt;$(AssemblyName).dll&lt;" />
    <ReplaceFileText Condition="'$(Configuration)' == 'Debug'" InputFilename="@(AddinManifest)" OutputFilename="@(AddinManifest)" MatchExpression="Assembly&gt;(.*?)&lt;" ReplacementText="Assembly&gt;$([System.IO.Path]::GetFullPath('$(OutputPath)'))$(AssemblyName).dll&lt;" />
  </Target>

  <!-- Define the ReplaceFileText task for .NET Framework  -->
  <UsingTask Condition="'$(MSBuildRuntimeType)' == 'Full'" TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            File.WriteAllText(OutputFilename,Regex.Replace(File.ReadAllText(InputFilename),MatchExpression,ReplacementText));
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Define the ReplaceFileText task for .NET Core  -->
  <UsingTask Condition="'$(MSBuildRuntimeType)' == 'Core'" TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            File.WriteAllText(OutputFilename,Regex.Replace(File.ReadAllText(InputFilename),MatchExpression,ReplacementText));
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- For the Debug configuration copy the addin to $(AppData)\Autodesk\Revit\Addins\  -->
  <Target Name="CopyAddinsToAppData" AfterTargets="CreateAddinManifest" Condition="'$(Configuration)' == 'Debug'">
    <Message Importance="high" Text="Copying addin file into Revit Addin folder" />
    <ItemGroup>
      <AddinFiles Include="$(OutputPath)\..\**\*.addin" />
    </ItemGroup>
    <Copy SourceFiles="@(AddinFiles)" DestinationFolder="$(AppData)\Autodesk\Revit\Addins\%(RecursiveDir)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Retries="3" RetryDelayMilliseconds="300" />
  </Target>

  <!-- Delete previously deployed to AppData folder add-in files -->
  <Target Name="CleanAddinsInAppData" AfterTargets="AfterClean">
    <ItemGroup>
      <AddinFiles Include="$(AppData)\Autodesk\Revit\Addins\**\$(AssemblyName).*" />
    </ItemGroup>
    <Delete Files="@(AddinFiles)" />
  </Target>

</Project>
